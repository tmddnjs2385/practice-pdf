{"version":3,"sources":["Pdf.js","App.js","serviceWorker.js","index.js"],"names":["MyPdfViewer","useState","page","setPage","pages","setPages","canvasEl","useRef","usePdf","file","loading","numPages","useEffect","ref","previousButton","className","onClick","nextButton","renderPagination","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAuHeA,EA7CK,WAAO,IAAD,EACAC,mBAAS,GADT,mBACjBC,EADiB,KACXC,EADW,OAEEF,mBAAS,MAFX,mBAEjBG,EAFiB,KAEVC,EAFU,KA0BlBC,EAAWC,iBAAO,MA1BA,EA4BIC,YAAO,CAACC,KAAM,YAAaP,OAAMI,aA5BrC,mBA4BjBI,EA5BiB,KA4BRC,EA5BQ,KAkCxB,OAJAC,qBAAU,WACRP,EAASM,KACR,CAACA,IAGF,6BACID,GAAW,4CAEb,4BAAQG,IAAKP,IAlCQ,SAACJ,EAAME,GAC9B,IAAKA,EACH,OAAO,KAET,IAAIU,EAAiB,4BAAQC,UAAU,WAAWC,QAAS,kBAAMb,EAAQD,EAAO,KAA3D,WAAuE,uBAAGa,UAAU,sBAC5F,IAATb,IACFY,EAAiB,4BAAQC,UAAU,qBAAlB,WAA8C,uBAAGA,UAAU,uBAE9E,IAAIE,EAAa,4BAAQF,UAAU,OAAOC,QAAS,kBAAMb,EAAQD,EAAO,KAAvD,QAAgE,uBAAGa,UAAU,uBAI9F,OAHIb,IAASE,IACXa,EAAa,4BAAQF,UAAU,iBAAlB,QAAuC,uBAAGA,UAAU,wBAGjE,6BACE,wBAAIA,UAAU,SACXD,EACAG,IAmBJC,CAAiBhB,EAAME,KC7Ffe,G,MAfL,WAMR,OACE,6BAEC,kBAAC,EAAD,SCFeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ee098a4b.chunk.js","sourcesContent":["\r\n\r\n// import React, { useRef, useEffect} from 'react';\r\n// import PropTypes from 'prop-types';\r\n\r\n// import pdfjs from 'pdfjs-dist';\r\n// import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\r\n\r\n// pdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\n// const PdfComponent = ({ src ,Page}) => {\r\n\r\n//   const canvasRef = useRef(null)\r\n\r\n  \r\n \r\n//   useEffect(() => {\r\n    \r\n//     const fetchPdf = async() => {\r\n\r\n//       const loadingTask = pdfjs.getDocument(src);\r\n\r\n//       const pdf =await loadingTask.promise;\r\n\r\n//       const page = await pdf.getPage(Page);\r\n     \r\n//       const scale = 1.5;\r\n\r\n//       const viewport = page.getViewport({scale: scale});\r\n//       // Prepare canvas using PDF page dimensions\r\n//       const canvas = canvasRef.current;\r\n\r\n//       const context = canvas.getContext('2d');\r\n//       canvas.height = viewport.height;\r\n//       canvas.width = viewport.width;\r\n\r\n//       // Render PDF page into canvas context\r\n//       const renderContext = {\r\n//         canvasContext: context,\r\n//         viewport: viewport\r\n//       };\r\n//       const renderTask = page.render(renderContext);\r\n\r\n//       await renderTask.promise;\r\n\r\n//     };\r\n\r\n//     fetchPdf();\r\n//   }, [src]);\r\n\r\n//   return (\r\n//     <>\r\n//     <canvas\r\n//       ref={canvasRef}\r\n//       width={window.innerWidth}\r\n//       height={window.innerHeight}\r\n//     />\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// PdfComponent.propTypes = {\r\n//   src: PropTypes.string\r\n// };\r\n\r\n// PdfComponent.defaultProps = {\r\n//   src: `${process.env.PUBLIC_URL}/helloworld.pdf`\r\n// };\r\n\r\n// export default PdfComponent;\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { usePdf } from 'react-pdf-js';\r\n\r\n\r\nconst MyPdfViewer = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [pages, setPages] = useState(null);\r\n\r\n  const renderPagination = (page, pages) => {\r\n    if (!pages) {\r\n      return null;\r\n    }\r\n    let previousButton = <button className=\"previous\" onClick={() => setPage(page - 1)}>Previous<i className=\"fa fa-arrow-left\"></i></button>;\r\n    if (page === 1) {\r\n      previousButton = <button className=\"previous disabled\">Previous<i className=\"fa fa-arrow-left\"></i></button>;\r\n    }\r\n    let nextButton = <button className=\"next\" onClick={() => setPage(page + 1)}>Next <i className=\"fa fa-arrow-right\"></i></button>;\r\n    if (page === pages) {\r\n      nextButton = <button className=\"next disabled\">Next <i className=\"fa fa-arrow-right\"></i></button>;\r\n    }\r\n    return (\r\n      <nav>\r\n        <ul className=\"pager\">\r\n          {previousButton}\r\n          {nextButton}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  const canvasEl = useRef(null);\r\n  \r\n  const [loading, numPages] = usePdf({file: './hw1.pdf', page, canvasEl });\r\n\r\n  useEffect(() => {\r\n    setPages(numPages);\r\n  }, [numPages]);\r\n\r\n  return (\r\n    <div>\r\n       {loading && <span>Loading...</span>} \r\n     \r\n      <canvas ref={canvasEl} />\r\n      {renderPagination(page, pages)}\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyPdfViewer;","import React from 'react';\nimport MyPdfViewer from './Pdf.js'\nimport './App.css';\n\n\nconst App=()=> {\n\n  \n\n  // const [Pages,setPages]=useState(1);\n\n  return (\n    <div>\n      \n     <MyPdfViewer/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}